* 2 Approaches of Angular 2 for creating forms
	Template-Driven Approach - Automatically creating the Javascipt representation of the form whenever it detects a 
				   new HTML element in the form
	Reactive Approach - We create the form on our own and we tell angular which form and which form element in HTML template has to 			    synchorize with the form object and controlls defined.

* Simple form :

<ion-content padding>
  <form>
    <ion-list>
      <ion-item>
        <ion-label fixed>Name</ion-label>
        <ion-input type="text" name="ingredientName" placeholder="Milk"></ion-input>
      </ion-item>
      <ion-item>
        <ion-label fixed>Amount</ion-label>
        <ion-input type="number" name="amount" placeholder="2"></ion-input>
      </ion-item>
    </ion-list>
    <button ion-button type="submit" block>Add Item</button>
  </form>
</ion-content>


Template Driven Approach:

	1. <ion-input type="text" name="ingredientName" placeholder="Milk" ngModel></ion-input>
	   Inserting ngModel ionic will know this has an action to handle through Javascript representation. This is known as registering 		   controlls

	2. <form #f="ngForm" (ngSubmit) = "onAddItem(f)"> : #f creates a local reference and has access to HTML skeleton of the form. 
           By adding "ngForm" then #f will have access to Javascript representation of the form created by Angular 2. 
           (ngSubmit) listens to the submit of the form and pass the form to the onAddItem method when submit event is triggered.

	  onAddItem(form: NgForm) {
    		console.log(form);		<= onAddItem() should look like this in the relevant ts class.    
	  }


Reactive Approach :

	1. Add the variable recipeForm and initializeForm method on .ts file and Call the method in constructor or ngOnInit

	  recipeForm: FormGroup;

	  private initializeForm() {
	    this.recipeForm = new FormGroup({
		'title': new FormControl(null, Validators.required),
		'description': new FormControl(null, Validators.required),
		'difficulty': new FormControl(this.selectOptions[1], Validators.required)
	    });
	  } 

	title, description and difficulty will be labels of the form.

	2. Add formGroup directive and ngSubmit event to form. add formControlName to input fields.
	 
	  <form [formGroup]="recipeForm" (ngSubmit)="onSubmit()">
	    <ion-list>
	      <ion-item>
		<ion-label floating>Title</ion-label>
		<ion-input type="text" formControlName="title"></ion-input>
	      </ion-item>
	      <ion-item>
		<ion-label floating>Description</ion-label>
		<ion-textarea formControlName="description"></ion-textarea>
	      </ion-item>
	      <ion-item>
		<ion-label floating>Difficulty</ion-label>
		 <ion-select formControlName="difficulty">
		   <ion-option *ngFor="let option of selectOptions" [value]="option">
		     {{ option }}</ion-option>
		 </ion-select>
	      </ion-item>
	    </ion-list>
	    <button type="submit" ion-button block>{{ mode }} Recipe</button>
	  </form>
